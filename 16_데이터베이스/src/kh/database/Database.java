package kh.database;

public class Database {
/*
 *  DBMS : 데이터에서 데이터 추출, 조작, 정의, 제어등을 할 수있게 해주는 데이터베이스
 *   1) 데이터 추출 :  사용자가 조회하는 데이터 혹은 응용프로그램의 데이터 추출
 *   2) 데이터 조작 : 데이터를 조작하는 소프트웨어가 요청하는 데이터 삽입
 *   3) 데이터 정의 : 데이터의 구조를 정의하고 데이터 구조에 대한 삭제 및 변경기능 수행
 *   4) 데이터 제어 : 데이터 베이스 사용자를 생성하고 모니터링하여 접근 제어
 *   
 *   관계형 데이터베이스(RDBMS)
 *    - 모든 데이터를 2차원 테이블 형태로 표현하고 테이블 사이의 비즈니스적 관꼐를 도출하는 구조
 *      데이터의 중복을 최소화하고 업무변화에 우수적
 *   
 *   SQL : 데이터를 조회하거나 조작하기 위해 사용하는 표준 검색언어
 *         조건을 기술하여 작성해야한다.
 *     DML : 데이터 조작 (INSERT, UPDATE, DELETE)
 *     DQL : 데이터 검색 (SELECT)
 *     DDL : 데이터 정의 (CREATE, DROP, ALTER)
 *     TCL : 트랜젝션 제어 (COMMIT, ROLLUP)
 *     
 *     @SQL DEVELOPER
 *       새로운 계정 만들기
 *        -- [표현법] CREATE USER 계정명 IDENTIFIED BY 계정비밀번호;

 *        CREATE USER KH IDENTIFIED BY KH
 *        
 *        -- 위에서 만든 사용자 계정에게 초소한의 권한(데이터관리, 접속) 부여
 *        -- 기본 권한을 설정해주어야 테이블을 사용가능하다.
 *        GRANT RESOURCE, CONNECT TO KH; --> 권한을 주는 명령어
 *        
 * 	
 */
	
	/*
    <SELECT>
      [표현법]
        SELECT 컬럼, 컬럼, 컬럼, ..., 컬럼
          FROM 테이블명;
        
        - 데이터를 조회할 때 사용하는 구문
        - SELECT를 통해서 조회된 결과물을 RESULT SET이라고 한다. (즉, 조회된 행들의 집합)
        - 조회하고자 하는 컬럼들은 반드시 FROM 절에 기술한 테이블에 존재하는 컬럼이어야 한다.
        
     <리터럴>
     임의로 지정된 문자열 ('')을 SELECT 절에 사용하면 테이블에 존재하는 데이터처럼 조회가 가능하다.
     리터럴은 RESULT SET의 모든 행에 반복적으로 출력된다.
     
     <DISTINCT>
     컬럼에 포함된 중복 값을 한번씩만 표시하고자 할 때 사용한다.
     SELECT 절에 한번만 기술할 수 있다.
*/
	
/*
    <WHERE>
      [표현볍]
       SELECT 칼럼, 칼럼, 칼럼.....
        FROM 테이블명
        WHERE 조건식;
        
     - 조회하고자하는 테이블에서 해당 조건에 만조하는 결과만을 조회하고자 할 때 사용된다.
     - 조건식에는 다양한 연산자들을 사용할 수 있다.
     
     
     <비교 연산자>
       =             : 동등 비교
       >, < , >=, <= : 대소 비교
       !=, <>, ^=    : 같지 않다 
*/


	/*
    <BETWEEN AND>
        [표현법]
            WHERE 비교대상컬럼 BETWEEN 하한값 AND 상한값
            
        -   WHERE 절에서 사용되는 구문으로 범위에 대한 조건을 제시할 때 사용한다.
        -   비교대상컬럼 값이 하한값 이상이고, 상한값 이하인 경우 TRUE를 리턴한다.
*/	
	
/*
    <LIKE>
        [표현법]
            WHERE 비교대상컬럼 LIKE '특정 패턴'
            
        - 비교하려는 컬럼 값이 지정된 특정 패턴에 만족할 경우 TRUE를 리턴한다.
        - 특정 패턴에는 '%', '_' 를 와일드카드로 사용할 수 있다.
          '%' : 0개 이상의 글자수
                EX) 비교대상컬럼 LIKE '문자%' -> 비교대상컬럼 값 중 '문자'로 시작하는 모든 행을 조회한다.
                    비교대상컬럼 LIKE '%문자' -> 비교대상컬럼 값 중 '문자'로 끝나는 모든 행을 조회한다.
                    비교대상컬럼 LIKE '%문자%' -> 비교대상컬럼 값 중 '문자'가 포함되어 있는 모든 행을 조회한다.
          '_' : 1글자
                EX) 비교대상컬럼 LIKE '_문자' -> 비교대상컬럼 값 중에 '문자' 앞에 무조건 한 글자가 오는 모든 행을 조회 (컬럼의 글자수 '_+문자수' 제한)
                    비교대상컬럼 LIKE '__문자' -> 비교대상컬럼 값 중에 '문자' 앞에 무조건 두 글자가 오는 모든 행을 조회(글자수 상단과 같이 제한)
*/	

/*
    <논리 연산자>
      여러 개의 조건을 엮을 때 사용한다.
      AND (~이면서, 그리고)
      OR  (~이거나, 또는)
*/

/*
    <IS NULL / IS NOT NULL>
        [표현법]
            WHERE 비교대성컬럼 IS [NOT] NULL;
            
            - 컬럼 값에 NULL이 있을 경우 NULL 값 비교에 사용된다.
            - 비교대상컬럼 IS NULL : 컬럼 값이 NULL 인 경우 TRUE를 리턴한다.
            - 비교대상컬럼 IS NOT NULL : 컬럼 값이 NULL 이 아닌 경우 TRUE를 리턴한다.
            
*/

/*
    <IN>
        [표현법]
            WHERE 비교대상컬럼 IN('값', '값', '값', ..., '값')
            
            - 값 목록 중에 일치하는 값이 있을 때 TRUE를 리턴한다.
*/
	
/*
    <연산자 우선순위>
     0.()
     1. 산술연산자
     2. 연결 연산자
     3. 비교 연산자
     4. IS NULL, LIKE, IN
     5. BETWEEN AND
     6. 논리 연산자 - NOT
     7. 논리 연산자 - AND
     7. 논리 연산자 - OR
*/	
	
/*
    <ORDER BY>
      [표현법]
       SELECT 컬럼, 컬럼, 컬럼..., 컬럼
       FROM 테이블명
       WHERE 조건식
       ORDER BY 정렬시키고자 하는 컬럼명|별칭|컬럼 순번 [ASC|DESC] [NULLS FIRST|NULLS LAST]

     - ASC  : 오름차순 정렬 <ASC 또는 DESC 생략 시 기본값)
     - DESC : 내림차순으로 정렬
     - NULLS FIRST : 정렬하고자 하는 컬럼 값에 NULL이 있는 경우 해당 데이터 값을 맨 앞으로 정렬한다.
     - NULLS LAST  : 정렬하고자 하는 컬럼 값에 NULL이 있는 경우 해당 데이터 값을 맨 뒤로 정렬한다.
*/	
	

	



	
	
}
