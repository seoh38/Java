package com.kh.stream.terminal;

import java.util.Arrays;
import java.util.OptionalDouble;
import java.util.OptionalInt;

import com.sun.net.httpserver.Filter;

public class B_Aggregate {
	/*
	 *  기본 집계
	 *     - 최종 처리 기능으로 요소들을 처리해서 카운티으 합계, 평균값, 최대값, 최소값 등과 같이 하나의 값으로 산출하는 것을 만한다.
	 *     - count() : 요소의 개수를 리턴
	 *     - sum() : 요소들의 합계를 리턴
	 *     - average() : 요소들의 평균을 리턴
	 *     - max() : 최대요소를 리턴
	 *     - min() : 최소 요소를 리턴
	 *     - findFirst() : 첫 번째 요소를 리턴
	 *     
	 *  커스텀 집계
	 *     - 스트림에서 기본집계 메소드를 제공하지만 다양한 집계 결과물을 만들수 있도록 reduce()라는 메소드를 제공
	 *       - 매개 타입으로 XXXOperator
	 *       - 리턴 타입으로 OptionalXXX  
	 *  
	 *  Optional 클래스
	 *     - 스트림의 최종 결과값을 저장하는 객체이다.
	 *     - 단순히 값만 저장하는 것이 아니라, 값의 존재여부를 확인하고 값이 존재하지 않을 경우 디폴트 값을 설정할 수 있는 객체이다.
	 *       - get() : 저장되어 있는 값을 얻기위해 사용한다. 
	 *       - isPresent() : 값이 저장되어 있는지 검사한다.
	 *       - orElse() : get()과 동일하게 저장되어 있는 값을 얻어오는 메소드로 값이 저장되어 있지 않을경우 디폴트값 지정 가능 
	 *       - isPresent(Consumer) : 값이 저장되어 있을 경우 Consumer에서 값을 처리한다.  
	 */
	
	public void method1( ) {
		int[] values = {1, 2, 3, 4, 5, 6};
		
		// 2의 배수의 개수
		long count = Arrays.stream(values).filter(value -> value % 2 == 0).count();
		
		System.out.println("2의 배수의 개수 : " + count);
		
		// 합계
		int sum = Arrays.stream(values).filter(value -> value % 2 == 0).sum();
		
		System.out.println("2의 배수의 합계 : " + sum);
		
		// 평균
		OptionalDouble average = Arrays.stream(values).filter(value -> value % 2 == 0).average();
		
		System.out.println("2의 배수의 평균 : " + average.getAsDouble());
		
		// 최대값
		OptionalInt max = Arrays.stream(values).filter(value -> value % 2 == 0).max();
		
		System.out.println("2의 배수의 최대값 : " + max.getAsInt());
		
		// 최소값
		OptionalInt min = Arrays.stream(values).filter(value -> value % 2 == 0).min();
		
		System.out.println("2의 배수의 최소값 : " + min.getAsInt());
		
		// 요소들 중의 첫번째 값
		OptionalInt findFirst = Arrays.stream(values).filter(value -> value % 2 == 0).findFirst();
		
		System.out.println("2의 배수의 첫번째 요소 : " + findFirst.getAsInt());
		
		
		
		
		
		
		
		
		
	}
}
